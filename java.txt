代码感觉（char是两个字节，小数默认为double，小数后加f表示为float类型）
Java ee Java se Java me
{软件编程用到什么学什么
做了才会
做的过程中才学
适当的囫囵吞枣
琢磨别人怎么做
mvc架构
java语言里负责解释执行字节码文件（就是.class文件）的是Java虚拟机，即jvm，jvm是可运行的Java字节码文件的虚拟计算机。所有平台上的jvm向编译器提供相同的编程接口，而编译器只需要面向虚拟机，生成虚拟机理解的代码，然后虚拟机来解释执行。在一些虚拟机的实现中，还会将虚拟机代码转换成特定系统的机器码执行。
当使用Java编译器编译Java程序时，生成的是与平台无关的字节码，这些字节码不面向任何具体平台，只面向jvm，不同平台的jvm都是不同的，但他们都提供了相同的接口，jvm是Java程序跨平台的关键部分，只要为不同平台实现了相应的虚拟机，编译后的Java字节码就可以在该平台上运行。
不同的操作系统，jvm，Java字节码。
sun公司制定的Java虚拟机规范在技术上规定了jvm的统一标准，具体定义了jvm的如下细节：
1.指令集
2.寄存器
3.类文件的格式
4.栈
5.垃圾回收堆
6.存储区
jdk提供了编译、运行Java程序所需的各种工具和资源。
jre除了包含jvm外，还包含运行Java程序的其他环境的支持。（运行Java程序，不仅需要jvm，还需要其他的类加载器、字节码校验器和基础类库）
一般而言，如果只是运行Java程序，我们可以只安装jre无需安装jdk。
如果需要开发Java程序，则安装jdk，安装了jdk之后，就包含了jre。
sun把Java分为 Java se、java ee 和Java me三个部分，
javac 和 Java 指令
Delphi VC用于做界面
Java数据库编程jdbc（SQL server oracle MySQL）
Java文件io流
Java网络编程
Java多线程
培养代码感（公司面试）
跨平台 就是夸操作系统。
jdk包含（jre（Java运行环境），Java的工具（Javac,java），Java类库（3600多），常用150多个）
jdk api1.6帮助文档
公共jre
用户环境变量和系统环境变量
bin（去哪找程序）。
编译程序和解释程序。
.java到.class(字节码)到（可执行文件）。
Javac编译当前的Java文件。
Java解释执行当前的.class字节码文件。
Java虚拟机（将字节码文件变为相应的（Linux，mac，window））。
只需把class文件给他。
把class文件反编译。
小影反编译
如何定义变量（）
如何运算（）
基本类型和对象类型
输出到控制台system.out.
一个程序就是一个世界（对象，对象运行互相作用，变量就是基本的组成单位）
加法和位移
补码（二进制）
Java基本数据类型（整数类型（byte，short，int，long）1 2 4 8
                  链表，字符串，字符数组
		  浮点类型（float和double）
		  布尔类型 boolean
                  字符类型 char）
char是两个字节（可以存放汉字）
int和char根据ascii可以相互转换。
Java加减把char变为整数运行。
汉字对应的Unicode码转换成int。基本类型 顺序执行 补码 二进制 整数 小数 布尔 char 
基本数据类型的转换（int a=1.2;system.out.println(a)）数 字符 字符串
数据类型可以自动的从低精度向高精度转，反之则不行。
但强制类型可以（int）1.2
byte short int long float double
小数默认为double类型
必须加上f
强制转换（）只留整数，必须强制。当一个整数和小数运算时都变为高精度。
后加f和l
加减乘除取余
}
try{//输入流，从键盘接收数
   InputStreamReader isr = new InputStreamReader(System.in)
   BufferedReader br =new BufferedReader(isr);
   //给出提示
   System.out.println（"请输入第一个数"）
   String al=br.readLine();
   System.out.println();
   
   float num1=Float.parseFloat(al);
}
catch（exception e）{
}
tostring 
integer.parse
float.parse
Java的复合类型(String(类))
{


}
顺序控制
条件控制
循环控制
顺序执行
从上到下 从左到右 依次执行。
for while if switch
switch是什么类型
case接收什么类型（如果不加break，之后的case直接执行）
switch（c）

{
   case'':(之后的当成整体看待)
   default :

}
；表示语句结束。
对象与垃圾回收：
垃圾回收机制只负责回收内存中的对象，不会回收任何物理资源（例如数据库连接、网络io等资源，程序无法精确控制垃圾回收的运行，垃圾回收会在合适的时候进行。当对象永久性的失去引用后，系统就会在合适的时候回收它所占的内存。在垃圾回收机制回收任何对象之前，总会先调用他的finalize()方法，该方法可能使该对象重新复活（让一个引用变量重新引用该对象），从而导致垃圾回收机制取消回收）
泛型类型通配符：
设定类型通配符的上限：当直接使用list<?>这种形式时，即表明这个list集合可以是任何泛型list的父类。但还有一种特殊的情形，我们不想使这个list《？》是任何泛型list的父类，只想表示它是某一类泛型的父类。
被限制的泛型通配符
所谓的泛型方法，就是在声明方法时定义一个或多个类型形参，泛型方法的用法格式如下：修饰符 <T,S> 返回值类型 方法名（形参列表）{}
泛型方法和类型通配符的区别：

多线程
继承thread类来创建线程类
（单线程的程序只有一个顺序执行流，多线程的程序可以包括多个顺序执行流，多个顺序流之间互不干扰。
 java提供了非常优秀的多线程支持，程序可以通过非常简单的方式来启动多线程）
创建线程 一个程序就是一个进程，内部可能包含了多个顺序执行流，每个顺序执行流就是一个线程 进程之间不能共享内存，但线程之间共享内存非常容易
系统创建进程时需要为该进程重新分配系统资源，但创建进程代价小的多，java语言内置了多线程功能支持，而不是单纯地作为底层操作系统的调度方式，从而简化了java的多线程编程。
每个线程的作用是完成一定的任务，实际上就是执行一段程序段（一段顺序执行的代码）。java使用线程执行体来代表这段代码。
继承thread类创建线程类。
thread中的run方法，该run方法的方法体就代表了线程需要完成的任务。因此把run（）方法称为线程执行体。
run（）方法里的代码执行流就是该线程所需要完成的任务。
当java程序开始运行后，程序至少会创建一个主线程，主线程的线程执行体不是由run（）确定的，而是由main（）方法确定的-main()方法的方法体代表主线程的线程执行体。
实现runnable接口创建线程类
定义Runnable接口的实现类，并重写该接口的run（）方法，该run（）方法的方法体同样是该线程的线程执行体。
创建Runnable实现类的实例，并以此实例作为thread的target来创建thread对象，该thread对象才是真正的线程对象。
控制线程：
join线程：
后台线程：jvm的垃圾回收线程就是典型的后台线程。如果所有的前台线程都死亡，后台线程会自动死亡
线程休眠 sleep
线程让步 yield
改变线程的优先级
线程同步：synchronized {线程同步块}，使用同步监视器的通用方法就是同步代码块。同步代码块的语法格式如下：
synchronized(同步监视器){
同步代码块
}线程开始执行同步代码块之前，必须先获得对同步监视器的锁定。
任何时刻只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完成后，该线程会释放对该同步监视器的锁定
任何对象都可作为同步监视器，因此通常推荐使用可能被并发访问的共享资源充当同步监视器。（放在run方法中）
同步方法：
与同步代码块对应，java的多线程安全支持还提供了同步方法，同步方法就是使用synchronized关键字来修饰某个方法，该方法称为同步方法。对于同步方法而言，无需显示指定同步监视器，同步方法的同步监视器是this，也就是对象本身。
通过使用同步方法可以非常方便地实现线程安全类，线程安全类具有如下的特征：
该类的对象可以被多个线程安全地访问
每个线程调用该对象的任意方法之后都将得到正确结果
每个线程调用该对象的任意方法之后，该对象状态依然保持合理状态
线程通信
正则表达式是一个强大的字符串处理工具，可以对字符串进行查找、提取、分隔、替换等操作。
String类提供了如下几个特殊的方法
java还提供了pattern和matcher两个类专门用于提供正则表达式的支持。
正则表达式是一个用于匹配字符串的模板。
可以说，我们定义的任意字符串都可以当成正则表达式使用，例如“abc”它也是一个正则表达式，只是它只能匹配“ABC”字符串。
一旦程序中定义了正则表达式，就可以使用pattern和matcher来使用正则表达式了。
pattern对象是正则表达式编译后在内存中的表示形式，因此，正则表达式字符串必须先被编译为pattern对象，然后利用该pattern对象创建对应的matcher对象。执行匹配所涉及的状态保留在matcher对象中，多个matcher对象可共享同一个pattern对象。
pattern是不可变类可供多个线程使用。
matcher































